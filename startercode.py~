from pygamehelper import *
from pygame import *
from pygame.locals import *
from vec2d import *
from math import e, pi, cos, sin, sqrt
from random import uniform
import random
import os
import pygame.mixer

class Starter(PygameHelper):
    def __init__(self):
        self.w, self.h = 800, 600
        PygameHelper.__init__(self, size=(self.w, self.h), fill=((255,255,255)))

        #Music Functions, Must be of WAV format
        pygame.mixer.init()
        pygame.mixer.music.load("Plink.wav")
        pygame.mixer.music.play(0,0.0)  

        self.boing = pygame.mixer.Sound("Boing.wav")
         
        
        self.x = 0 + 30
        self.y = 600 - 40
        self.spriteswitch = 1
        self.flipswitch = 1
        self.airbool = False
        self.gravity = 0.5
        self.upForce = 0
        self.lastkey = "none"

        self.bulletlocx = 0
        self.bulletlocy = 0
        self.shot = False
        self.bulletdir = "RIGHT"

        self.player1img = pygame.image.load(os.path.join('MarioSprites','Mario1.png')).convert_alpha()
        self.player1 = pygame.transform.scale(self.player1img, (30,40))

        backgroundimg = pygame.image.load(os.path.join('Resources','Background.png')).convert()
        self.background = pygame.transform.scale(backgroundimg, (800,600))

    def update(self):
        #uncomment to check mixer state
        #print pygame.mixer.get_busy()
        
        #Checking pressed keys
        key = pygame.key.get_pressed()

        if(self.y >= 560):
            self.y = 560
            self.gravity = 0.5

        if(self.y < 560):
            self.gravity += 0.1

        if key[pygame.K_SPACE]:
            if(self.y == 560):
                self.boing.play()
                self.airbool = True
                self.upForce = 20

        if(self.airbool == True):
            self.player1img = pygame.image.load(os.path.join("MarioSprites", "MarioJump.png")).convert_alpha()
            self.player1 = pygame.transform.scale(self.player1img, (30,40))
            if(self.upForce > -10*self.gravity):
                self.upForce -= self.gravity + 0.5
            self.y -= self.upForce
            if key[pygame.K_RIGHT]:
                pass
            elif key[pygame.K_LEFT]:
                self.player1 = pygame.transform.flip(self.player1, True, False)
            elif(self.lastkey == "LEFT"):
                self.player1 = pygame.transform.flip(self.player1, True, False)

        if(self.y >= 560):
            self.airbool = False
            self.upForce = 0
            self.gravity = 0.5

        if key[pygame.K_RIGHT]:
            self.x = self.x + 5

            if(self.airbool == False):
                self.spriteswitch += 0.2

            if(self.spriteswitch == 1):
                self.player1img = pygame.image.load(os.path.join('MarioSprites','Mario2.png')).convert_alpha()
                self.player1 = pygame.transform.scale(self.player1img, (30,40))

            if(self.spriteswitch >= 2):
                self.spriteswitch = 0
                self.player1img = pygame.image.load(os.path.join('MarioSprites','Mario1.png')).convert_alpha()
                self.player1 = pygame.transform.scale(self.player1img, (30,40))

        elif key[pygame.K_LEFT]:
            self.x = self.x - 5

            if(self.airbool == False):
                self.spriteswitch += 0.2

            if(self.spriteswitch == 1):
                self.player1img = pygame.image.load(os.path.join('MarioSprites','Mario2.png')).convert_alpha()
                self.player1 = pygame.transform.scale(self.player1img, (30,40))
                self.player1 = pygame.transform.flip(self.player1, True, False)

            elif(self.spriteswitch >= 2.5):
                self.spriteswitch = 0
                self.player1img = pygame.image.load(os.path.join('MarioSprites','Mario1.png')).convert_alpha()
                self.player1 = pygame.transform.scale(self.player1img, (30,40))
                self.player1 = pygame.transform.flip(self.player1, True, False)

            #Flipping the image if left button pressed
            if(self.flipswitch == 1):
                self.player1 = pygame.transform.flip(self.player1, True, False)

                self.flipswitch = 0

        else:
            #Resetting "Jump Sprite" if not in air and not moving.
            if(self.airbool != True):
                self.player1img = pygame.image.load(os.path.join('MarioSprites','Mario1.png')).convert_alpha()
                self.player1 = pygame.transform.scale(self.player1img, (30,40))
                if(self.lastkey == "LEFT"):
                    self.player1 = pygame.transform.flip(self.player1, True, False)


        # -- Shooting Methods -- #

        if key[pygame.K_z]:
            if(self.airbool == False):
                if(self.shot == False):
                    self.shot = True
                    self.bulletlocx = self.x + 15
                    self.bulletlocy = self.y + 20

                    if(self.lastkey == "LEFT"):
                        self.bulletdir = "LEFT"

                    if key[pygame.K_RIGHT]:
                        self.bulletdir = "RIGHT"
                    if key[pygame.K_LEFT]:
                        self.bulletdir = "LEFT"





        if(self.shot == True):
            if(self.bulletdir == "RIGHT"):
                self.bulletlocx += 10
            elif(self.bulletdir == "LEFT"):
                self.bulletlocx -= 10
        if(self.bulletlocx >= 800):
            self.shot = False
        elif(self.bulletlocx <= 0):
            self.shot = False



    def keyUp(self, key):
        if(self.airbool == False):
            #Resetting player image after keyup event
            if(key == pygame.K_RIGHT):
                self.player1img = pygame.image.load(os.path.join('MarioSprites','Mario1.png')).convert_alpha()
                self.player1 = pygame.transform.scale(self.player1img, (30,40))

                #Resetting flipswitch after right keyup event
                self.flipswitch = 1

                #Modifying Lastkey
                self.lastkey = "RIGHT"

            if(key == pygame.K_LEFT):
                self.player1img = pygame.image.load(os.path.join('MarioSprites','Mario1.png')).convert_alpha()
                self.player1 = pygame.transform.scale(self.player1img, (30,40))
                self.player1 = pygame.transform.flip(self.player1, True, False)

                #Modifying Lastkey
                self.lastkey = "LEFT"

    def mouseUp(self, button, pos):
        pass

    def mouseMotion(self, buttons, pos, rel):
        pass

    def draw(self):
        self.screen.blit(self.background, (0,0))

        if(self.shot == True):
            pygame.draw.circle(self.screen,(0,0,0),(self.bulletlocx, self.bulletlocy),10)

        self.screen.blit(self.player1, (self.x,self.y))

s = Starter()
s.mainLoop(60)

# http://www.pygame.org/docs/ref/key.html
# http://www.pygame.org/docs/ref/mixer.html
# http://soundbible.com/
